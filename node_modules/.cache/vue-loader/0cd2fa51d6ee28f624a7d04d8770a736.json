{"remainingRequest":"C:\\Users\\michael.wu\\Documents\\hailiao-admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\michael.wu\\Documents\\hailiao-admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\michael.wu\\Documents\\hailiao-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\michael.wu\\Documents\\hailiao-admin\\src\\views\\components\\publicUserForm.vue?vue&type=template&id=5a6367a7&scoped=true&","dependencies":[{"path":"C:\\Users\\michael.wu\\Documents\\hailiao-admin\\src\\views\\components\\publicUserForm.vue","mtime":1660620162784},{"path":"C:\\Users\\michael.wu\\Documents\\hailiao-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1660620364482},{"path":"C:\\Users\\michael.wu\\Documents\\hailiao-admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1660620403972},{"path":"C:\\Users\\michael.wu\\Documents\\hailiao-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1660620364482},{"path":"C:\\Users\\michael.wu\\Documents\\hailiao-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":1660620394551}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}